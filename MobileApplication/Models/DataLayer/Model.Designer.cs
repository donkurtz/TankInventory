//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("MobileModel", "FK_Tanks_TankGroups", "TankGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(MobileApplication.Models.DataLayer.TankGroup), "Tank", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MobileApplication.Models.DataLayer.Tank), true)]

#endregion

namespace MobileApplication.Models.DataLayer
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MobileEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new MobileEntities object using the connection string found in the 'MobileEntities' section of the application configuration file.
        /// </summary>
        public MobileEntities() : base("name=MobileEntities", "MobileEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MobileEntities object.
        /// </summary>
        public MobileEntities(string connectionString) : base(connectionString, "MobileEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MobileEntities object.
        /// </summary>
        public MobileEntities(EntityConnection connection) : base(connection, "MobileEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TankData1> TankData1
        {
            get
            {
                if ((_TankData1 == null))
                {
                    _TankData1 = base.CreateObjectSet<TankData1>("TankData1");
                }
                return _TankData1;
            }
        }
        private ObjectSet<TankData1> _TankData1;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Product> Products
        {
            get
            {
                if ((_Products == null))
                {
                    _Products = base.CreateObjectSet<Product>("Products");
                }
                return _Products;
            }
        }
        private ObjectSet<Product> _Products;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TankGroup> TankGroups
        {
            get
            {
                if ((_TankGroups == null))
                {
                    _TankGroups = base.CreateObjectSet<TankGroup>("TankGroups");
                }
                return _TankGroups;
            }
        }
        private ObjectSet<TankGroup> _TankGroups;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Tank> Tanks
        {
            get
            {
                if ((_Tanks == null))
                {
                    _Tanks = base.CreateObjectSet<Tank>("Tanks");
                }
                return _Tanks;
            }
        }
        private ObjectSet<Tank> _Tanks;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TankData1 EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTankData1(TankData1 tankData1)
        {
            base.AddObject("TankData1", tankData1);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Products EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProducts(Product product)
        {
            base.AddObject("Products", product);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TankGroups EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTankGroups(TankGroup tankGroup)
        {
            base.AddObject("TankGroups", tankGroup);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tanks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTanks(Tank tank)
        {
            base.AddObject("Tanks", tank);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="tankName">No Metadata Documentation available.</param>
        /// <param name="product">No Metadata Documentation available.</param>
        /// <param name="tankLevel">No Metadata Documentation available.</param>
        /// <param name="unavailable">No Metadata Documentation available.</param>
        /// <param name="maxBlendPercentage">No Metadata Documentation available.</param>
        /// <param name="comments">No Metadata Documentation available.</param>
        public int funcAddTankData(global::System.String tankName, global::System.String product, Nullable<global::System.Double> tankLevel, Nullable<global::System.Boolean> unavailable, Nullable<global::System.Double> maxBlendPercentage, global::System.String comments)
        {
            ObjectParameter tankNameParameter;
            if (tankName != null)
            {
                tankNameParameter = new ObjectParameter("TankName", tankName);
            }
            else
            {
                tankNameParameter = new ObjectParameter("TankName", typeof(global::System.String));
            }
    
            ObjectParameter productParameter;
            if (product != null)
            {
                productParameter = new ObjectParameter("Product", product);
            }
            else
            {
                productParameter = new ObjectParameter("Product", typeof(global::System.String));
            }
    
            ObjectParameter tankLevelParameter;
            if (tankLevel.HasValue)
            {
                tankLevelParameter = new ObjectParameter("TankLevel", tankLevel);
            }
            else
            {
                tankLevelParameter = new ObjectParameter("TankLevel", typeof(global::System.Double));
            }
    
            ObjectParameter unavailableParameter;
            if (unavailable.HasValue)
            {
                unavailableParameter = new ObjectParameter("Unavailable", unavailable);
            }
            else
            {
                unavailableParameter = new ObjectParameter("Unavailable", typeof(global::System.Boolean));
            }
    
            ObjectParameter maxBlendPercentageParameter;
            if (maxBlendPercentage.HasValue)
            {
                maxBlendPercentageParameter = new ObjectParameter("MaxBlendPercentage", maxBlendPercentage);
            }
            else
            {
                maxBlendPercentageParameter = new ObjectParameter("MaxBlendPercentage", typeof(global::System.Double));
            }
    
            ObjectParameter commentsParameter;
            if (comments != null)
            {
                commentsParameter = new ObjectParameter("Comments", comments);
            }
            else
            {
                commentsParameter = new ObjectParameter("Comments", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("funcAddTankData", tankNameParameter, productParameter, tankLevelParameter, unavailableParameter, maxBlendPercentageParameter, commentsParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MobileModel", Name="Product")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Product : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Product object.
        /// </summary>
        /// <param name="product1">Initial value of the Product1 property.</param>
        public static Product CreateProduct(global::System.String product1)
        {
            Product product = new Product();
            product.Product1 = product1;
            return product;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Product1
        {
            get
            {
                return _Product1;
            }
            set
            {
                if (_Product1 != value)
                {
                    OnProduct1Changing(value);
                    ReportPropertyChanging("Product1");
                    _Product1 = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Product1");
                    OnProduct1Changed();
                }
            }
        }
        private global::System.String _Product1;
        partial void OnProduct1Changing(global::System.String value);
        partial void OnProduct1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MobileModel", Name="Tank")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Tank : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Tank object.
        /// </summary>
        /// <param name="tankName">Initial value of the TankName property.</param>
        public static Tank CreateTank(global::System.String tankName)
        {
            Tank tank = new Tank();
            tank.TankName = tankName;
            return tank;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TankName
        {
            get
            {
                return _TankName;
            }
            set
            {
                if (_TankName != value)
                {
                    OnTankNameChanging(value);
                    ReportPropertyChanging("TankName");
                    _TankName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("TankName");
                    OnTankNameChanged();
                }
            }
        }
        private global::System.String _TankName;
        partial void OnTankNameChanging(global::System.String value);
        partial void OnTankNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TankGroup
        {
            get
            {
                return _TankGroup;
            }
            set
            {
                OnTankGroupChanging(value);
                ReportPropertyChanging("TankGroup");
                _TankGroup = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TankGroup");
                OnTankGroupChanged();
            }
        }
        private global::System.String _TankGroup;
        partial void OnTankGroupChanging(global::System.String value);
        partial void OnTankGroupChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MobileModel", "FK_Tanks_TankGroups", "TankGroup")]
        public TankGroup TankGroup1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TankGroup>("MobileModel.FK_Tanks_TankGroups", "TankGroup").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TankGroup>("MobileModel.FK_Tanks_TankGroups", "TankGroup").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TankGroup> TankGroup1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TankGroup>("MobileModel.FK_Tanks_TankGroups", "TankGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TankGroup>("MobileModel.FK_Tanks_TankGroups", "TankGroup", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MobileModel", Name="TankData1")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TankData1 : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TankData1 object.
        /// </summary>
        /// <param name="tankID">Initial value of the TankID property.</param>
        public static TankData1 CreateTankData1(global::System.Int32 tankID)
        {
            TankData1 tankData1 = new TankData1();
            tankData1.TankID = tankID;
            return tankData1;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TankID
        {
            get
            {
                return _TankID;
            }
            set
            {
                if (_TankID != value)
                {
                    OnTankIDChanging(value);
                    ReportPropertyChanging("TankID");
                    _TankID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TankID");
                    OnTankIDChanged();
                }
            }
        }
        private global::System.Int32 _TankID;
        partial void OnTankIDChanging(global::System.Int32 value);
        partial void OnTankIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TankName
        {
            get
            {
                return _TankName;
            }
            set
            {
                OnTankNameChanging(value);
                ReportPropertyChanging("TankName");
                _TankName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TankName");
                OnTankNameChanged();
            }
        }
        private global::System.String _TankName;
        partial void OnTankNameChanging(global::System.String value);
        partial void OnTankNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Product
        {
            get
            {
                return _Product;
            }
            set
            {
                OnProductChanging(value);
                ReportPropertyChanging("Product");
                _Product = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Product");
                OnProductChanged();
            }
        }
        private global::System.String _Product;
        partial void OnProductChanging(global::System.String value);
        partial void OnProductChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> TanlLevel
        {
            get
            {
                return _TanlLevel;
            }
            set
            {
                OnTanlLevelChanging(value);
                ReportPropertyChanging("TanlLevel");
                _TanlLevel = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TanlLevel");
                OnTanlLevelChanged();
            }
        }
        private Nullable<global::System.Double> _TanlLevel;
        partial void OnTanlLevelChanging(Nullable<global::System.Double> value);
        partial void OnTanlLevelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Unavailable
        {
            get
            {
                return _Unavailable;
            }
            set
            {
                OnUnavailableChanging(value);
                ReportPropertyChanging("Unavailable");
                _Unavailable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Unavailable");
                OnUnavailableChanged();
            }
        }
        private Nullable<global::System.Boolean> _Unavailable;
        partial void OnUnavailableChanging(Nullable<global::System.Boolean> value);
        partial void OnUnavailableChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> MaxBlendPercentage
        {
            get
            {
                return _MaxBlendPercentage;
            }
            set
            {
                OnMaxBlendPercentageChanging(value);
                ReportPropertyChanging("MaxBlendPercentage");
                _MaxBlendPercentage = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MaxBlendPercentage");
                OnMaxBlendPercentageChanged();
            }
        }
        private Nullable<global::System.Double> _MaxBlendPercentage;
        partial void OnMaxBlendPercentageChanging(Nullable<global::System.Double> value);
        partial void OnMaxBlendPercentageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Comments
        {
            get
            {
                return _Comments;
            }
            set
            {
                OnCommentsChanging(value);
                ReportPropertyChanging("Comments");
                _Comments = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Comments");
                OnCommentsChanged();
            }
        }
        private global::System.String _Comments;
        partial void OnCommentsChanging(global::System.String value);
        partial void OnCommentsChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MobileModel", Name="TankGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TankGroup : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TankGroup object.
        /// </summary>
        /// <param name="tankGroup1">Initial value of the TankGroup1 property.</param>
        public static TankGroup CreateTankGroup(global::System.String tankGroup1)
        {
            TankGroup tankGroup = new TankGroup();
            tankGroup.TankGroup1 = tankGroup1;
            return tankGroup;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TankGroup1
        {
            get
            {
                return _TankGroup1;
            }
            set
            {
                if (_TankGroup1 != value)
                {
                    OnTankGroup1Changing(value);
                    ReportPropertyChanging("TankGroup1");
                    _TankGroup1 = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("TankGroup1");
                    OnTankGroup1Changed();
                }
            }
        }
        private global::System.String _TankGroup1;
        partial void OnTankGroup1Changing(global::System.String value);
        partial void OnTankGroup1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MobileModel", "FK_Tanks_TankGroups", "Tank")]
        public EntityCollection<Tank> Tanks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Tank>("MobileModel.FK_Tanks_TankGroups", "Tank");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Tank>("MobileModel.FK_Tanks_TankGroups", "Tank", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
